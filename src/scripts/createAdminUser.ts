import { prisma } from '../database/prisma';
import bcrypt from 'bcrypt';

async function createAdminUser() {
  try {
    console.log('üîç Verificando usu√°rios no banco...');
    
    // Verificar total de usu√°rios
    const totalUsers = await prisma.user.count();
    console.log(`üìä Total de usu√°rios no banco: ${totalUsers}`);
    
    if (totalUsers === 0) {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio encontrado. Criando usu√°rio administrador...');
      
      const hashedPassword = await bcrypt.hash('admin123', 10);
      
      const adminUser = await prisma.user.create({
        data: {
          name: 'Administrador',
          email: 'admin@keycrm.com',
          password: hashedPassword,
          offices: 'Diretor',
          department: 'Diretoria',
          status: 'ACTIVE',
          chatCode: 'ADM#2024',
          chatCodeGenerations: 0
        }
      });
      
      console.log('‚úÖ Usu√°rio administrador criado com sucesso!');
      console.log('üìß Email: admin@keycrm.com');
      console.log('üîë Senha: admin123');
      console.log(`üÜî ID: ${adminUser.id}`);
    } else {
      console.log('‚úÖ Usu√°rios encontrados no banco:');
      
      const users = await prisma.user.findMany({
        select: {
          id: true,
          name: true,
          email: true,
          offices: true,
          department: true,
          status: true,
          createdAt: true
        },
        take: 5
      });
      
      users.forEach(user => {
        console.log(`- ID: ${user.id}, Nome: ${user.name}, Email: ${user.email}, Cargo: ${user.offices}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar/criar usu√°rio admin:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o script
createAdminUser(); 