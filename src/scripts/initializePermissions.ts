import { PermissionService } from '../services/permission.services';
import { prisma } from '../database/prismaClient';

async function initializePermissions() {
  try {
    console.log('üîê Inicializando sistema de permiss√µes...');
    
    const permissionService = new PermissionService();
    
    // Inicializar permiss√µes e roles padr√£o
    await permissionService.initializeSystemPermissions();
    
    console.log('‚úÖ Sistema de permiss√µes inicializado com sucesso!');
    
    // Verificar se existe usu√°rio admin
    const adminUser = await prisma.user.findFirst({
      where: {
        OR: [
          { department: 'Diretoria' },
          { offices: { contains: 'Diretor' } }
        ]
      }
    });

    if (adminUser) {
      console.log(`üë§ Usu√°rio admin encontrado: ${adminUser.name} (${adminUser.email})`);
      
      // Atribuir role de Administrador ao usu√°rio admin
      const adminRole = await prisma.role.findUnique({
        where: { name: 'Administrador' }
      });

      if (adminRole) {
        try {
          await permissionService.assignRoleToUser(adminUser.id, adminRole.id, adminUser.id);
          console.log('‚úÖ Role de Administrador atribu√≠da ao usu√°rio admin');
        } catch (error: any) {
          if (error.message.includes('j√° possui esta fun√ß√£o')) {
            console.log('‚ÑπÔ∏è  Usu√°rio admin j√° possui a fun√ß√£o de Administrador');
          } else {
            console.error('‚ùå Erro ao atribuir role de admin:', error.message);
          }
        }
      }
    } else {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio admin encontrado. Crie um usu√°rio com departamento "Diretoria" ou cargo "Diretor"');
    }

    console.log('\nüéâ Inicializa√ß√£o conclu√≠da!');
    console.log('üí° Acesse /admin ‚Üí Permiss√µes & N√≠veis para gerenciar o sistema');
    
  } catch (error) {
    console.error('‚ùå Erro ao inicializar sistema de permiss√µes:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  initializePermissions();
}

export { initializePermissions }; 